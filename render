#!/bin/bash
set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

cmd_helps=()
dev_cmd_helps=()

defhelp() {
  if [ "$1" = '-dev' ]; then
    local command="${2?}"
    local text="${3?}"
    local help_str
    help_str="$(printf '   %-18s %s' "$command" "$text")"
    dev_cmd_helps+=("$help_str")
  else
    local command="${1?}"
    local text="${2?}"
    local help_str
    help_str="$(printf '   %-18s %s' "$command" "$text")"
    cmd_helps+=("$help_str")
  fi
}

# Print out help information
cmd_help() {
  echo "Script for performing tasks related to the render service repository."
  echo
  echo "Usage: ./render [COMMAND]"
  echo "Replace [COMMAND] with a word from the list below."
  echo
  echo "COMMAND list:"
  for str in "${cmd_helps[@]}"; do
    echo -e "$str"
  done
  echo
  echo "DEV_COMMAND list:"
  for str in "${dev_cmd_helps[@]}"; do
    echo -e "$str"
  done
}

defhelp help 'View all help.'
defhelp 'dev [DEV_COMMAND]' 'Run a developer command.'

# Start development environment
cmd_start() {
  echo "Creating systems..."
  docker-compose up -d
  echo -e "\n${GREEN}Systems are ready!${NC}"
}
defhelp start 'Start development environment (this also runs the update command).'

# Stop development environment
cmd_end() {
  echo "Stopping systems... (takes roughly 10 to 20 seconds)"
  docker-compose down
  echo
  echo "Deleting system volumes..."
  docker volume ls -qf dangling=true | xargs -r docker volume rm
}
defhelp end 'Stop development environment.'

# Restart development environment
cmd_restart() {
  cmd_end
  cmd_start
}
defhelp restart 'Stop and then restart development environment.'

# Build Docker images
dev_build() {
  echo "Building Docker images..."
  docker-compose build
  echo
  echo "Deleting untagged images..."
  docker images --no-trunc | grep '<none>' | awk '{ print $3 }' | xargs -r docker rmi
}
defhelp -dev build 'Build or rebuild Docker images.'

# Run shell
dev_shell() {
  docker-compose exec render bash
}
defhelp -dev shell 'Open shell render service.'

# Run style checks
dev_style() {
  echo "Not Implemented"
  # echo "Running PEP8 style checker..."
  # docker-compose exec render /docker_venv/bin/flake8
  # pep8_status=$?
  # echo
  # echo "Running Python docstring checker..."
  # docker-compose exec render /docker_venv/bin/pydocstyle --count --explain
  # pydocstyle_status=$?
  # ! (( pep8_status || pydocstyle_status ))
}
defhelp -dev style 'Run style checks.'

# Generates the documentation (with warnings as errors)
dev_docs() {
  echo "Not Implemented"
  # echo "Removing any existing documentation..."
  # docker-compose exec render rm -rf /cs-unplugged/docs/build/
  # docker-compose exec render mkdir /cs-unplugged/docs/build/
  # echo
  # echo "Creating documentation..."
  # docker-compose exec render /docker_venv/bin/sphinx-build -W /cs-unplugged/docs/source/ /cs-unplugged/docs/build/
}
defhelp -dev docs 'Generate documentation.'

# Run test suite
dev_test_suite() {
  echo "Running test suite..."
  docker-compose exec render /docker_venv/bin/coverage run --rcfile=/renderservice/.coveragerc -m render.tests.start_tests -v
}
defhelp -dev test 'Run test suite with code coverage.'

# Display test coverage table
dev_test_coverage() {
  echo "Displaying test suite coverage..."
  docker-compose exec render /docker_venv/bin/coverage xml -i
  docker-compose exec render /docker_venv/bin/coverage report -m --skip-covered
}
defhelp -dev test_coverage 'Display code coverage report.'

dev_test_coverage_upload() {
  echo "Not Implemented"
  # echo "Uploading test suite coverage..."
  # docker cp "$(docker-compose ps -q render)":/renderservice/coverage.xml ./coverage.xml
  # bash <(curl -s https://codecov.io/bash)
}
defhelp -dev test_coverage_upload 'Upload coverage report to codecov.'

dev_test_with_coverage() {
  dev_test_suite
  test_status=$?
  dev_test_coverage
  coverage_status=$?
  dev_test_coverage_upload
  ! (( $test_status || $coverage_status ))
}
defhelp -dev test_with_coverage 'Combine test suit, coverage and upload.'

# Delete all untagged dangling Docker images
cmd_clean() {
  echo "If the following commands return an argument not found error,"
  echo "this is because there is nothing to delete for clean up."

  echo
  echo "Deleting unused volumes..."
  docker volume ls -qf dangling=true | xargs -r docker volume rm
  echo
  echo "Deleting exited containers..."
  docker ps --filter status=dead --filter status=exited -aq | xargs docker rm -v
  echo
  echo "Deleting dangling images..."
  docker images -f "dangling=true" -q | xargs docker rmi
}
defhelp clean 'Delete unused Docker files.'

# Delete all Docker containers and images
cmd_wipe() {
  docker ps -a -q | xargs docker rm
  docker images -q | xargs docker rmi
}
defhelp wipe 'Delete all Docker containers and images.'

# View logs
cmd_logs() {
  docker-compose logs
}
defhelp logs 'View logs.'

silent() {
  "$@" > /dev/null 2>&1
}

cmd_dev() {
  local cmd="$1"
  shift
  if [ -z "$cmd" ]; then
    echo -e "${RED}ERROR: dev command requires one parameter!${NC}"
    cmd_help
    return 1
  fi
  if silent type "dev_$cmd"; then
    "dev_$cmd" "$@"
    exit $?
  else
    echo -e "${RED}ERROR: Unknown command!${NC}"
    echo "Type './render help' for available commands."
    return 1
  fi
}

# If no command given
if [ $# -eq 0 ]; then
  echo -e "${RED}ERROR: This script requires a command!${NC}"
  cmd_help
  exit 1
fi
cmd="$1"
shift
if silent type "cmd_$cmd"; then
  "cmd_$cmd" "$@"
  exit $?
else
  echo -e "${RED}ERROR: Unknown command!${NC}"
  echo "Type './render help' for available commands."
  exit 1
fi
